{"ast":null,"code":"import { initializeApp } from \"firebase/app\";\nimport { getAuth, createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut, onAuthStateChanged } from \"firebase/auth\";\nimport { getFirestore, doc, setDoc, getDoc } from \"firebase/firestore\";\n\n// ✅ Corrected Firebase Configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyC9XQrU79CXuj_s-5SWpP0s8knM2qyc2x8\",\n  // Correct API Key from Firebase Console\n  authDomain: \"sample-d7290.firebaseapp.com\",\n  projectId: \"sample-d7290\",\n  storageBucket: \"sample-d7290.firebasestorage.app\",\n  // ✅ Fixed Storage Bucket\n  messagingSenderId: \"755788443725\",\n  appId: \"1:755788443725:web:cdfc6af42193a4da9d6c04\",\n  measurementId: \"G-MCEZX0450J\"\n};\n\n// ✅ Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nconst auth = getAuth(app);\nconst db = getFirestore(app);\n\n// ✅ Register New User and Assign Role (Email/Password)\nconst registerWithEmail = async (email, password, role) => {\n  try {\n    const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n    const user = userCredential.user;\n\n    // ✅ Save user details in Firestore with assigned role\n    await setDoc(doc(db, \"users\", user.uid), {\n      email: user.email,\n      role: role,\n      // Either 'fsra' or 'carrier'\n      uid: user.uid\n    });\n    console.log(\"✅ User registered successfully:\", user.email);\n    return user;\n  } catch (error) {\n    console.error(\"❌ Error registering user:\", error.message);\n    return null;\n  }\n};\n\n// ✅ Login Existing User and Fetch Role\nconst loginWithEmail = async (email, password) => {\n  try {\n    const userCredential = await signInWithEmailAndPassword(auth, email, password);\n    const user = userCredential.user;\n\n    // ✅ Fetch User Role from Firestore\n    const userRef = doc(db, \"users\", user.uid);\n    const userSnap = await getDoc(userRef);\n    if (userSnap.exists()) {\n      const role = userSnap.data().role;\n      console.log(\"✅ User logged in:\", user.email, \"Role:\", role);\n      return {\n        user,\n        role\n      };\n    } else {\n      console.warn(\"⚠️ No role found, defaulting to Carrier\");\n      return {\n        user,\n        role: \"carrier\"\n      }; // Default role\n    }\n  } catch (error) {\n    console.error(\"❌ Error logging in:\", error.message);\n    return null;\n  }\n};\n\n// ✅ Logout User\nconst logout = async () => {\n  try {\n    await signOut(auth);\n    console.log(\"✅ User logged out\");\n  } catch (error) {\n    console.error(\"❌ Error logging out:\", error.message);\n  }\n};\n\n// ✅ Listen for Auth State Changes (Auto Login Check)\nconst authStateListener = (setUser, setRole) => {\n  return onAuthStateChanged(auth, async currentUser => {\n    if (currentUser) {\n      setUser(currentUser);\n      const userRef = doc(db, \"users\", currentUser.uid);\n      const userSnap = await getDoc(userRef);\n      if (userSnap.exists()) {\n        setRole(userSnap.data().role);\n      } else {\n        setRole(\"carrier\"); // Default role\n      }\n    } else {\n      setUser(null);\n      setRole(null);\n    }\n  });\n};\n\n// ✅ Export Everything\nexport { auth, db, registerWithEmail, loginWithEmail, logout, authStateListener };","map":{"version":3,"names":["initializeApp","getAuth","createUserWithEmailAndPassword","signInWithEmailAndPassword","signOut","onAuthStateChanged","getFirestore","doc","setDoc","getDoc","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","app","auth","db","registerWithEmail","email","password","role","userCredential","user","uid","console","log","error","message","loginWithEmail","userRef","userSnap","exists","data","warn","logout","authStateListener","setUser","setRole","currentUser"],"sources":["/Users/gwynethnicole/Desktop/frsa-web-app/src/firebaseConfig.js"],"sourcesContent":["import { initializeApp } from \"firebase/app\";\nimport {\n    getAuth,\n    createUserWithEmailAndPassword,\n    signInWithEmailAndPassword,\n    signOut,\n    onAuthStateChanged\n} from \"firebase/auth\";\nimport {\n    getFirestore,\n    doc,\n    setDoc,\n    getDoc\n} from \"firebase/firestore\";\n\n// ✅ Corrected Firebase Configuration\nconst firebaseConfig = {\n    apiKey: \"AIzaSyC9XQrU79CXuj_s-5SWpP0s8knM2qyc2x8\",  // Correct API Key from Firebase Console\n    authDomain: \"sample-d7290.firebaseapp.com\",\n    projectId: \"sample-d7290\",\n    storageBucket: \"sample-d7290.firebasestorage.app\",  // ✅ Fixed Storage Bucket\n    messagingSenderId: \"755788443725\",\n    appId: \"1:755788443725:web:cdfc6af42193a4da9d6c04\",\n    measurementId: \"G-MCEZX0450J\"\n};\n\n// ✅ Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nconst auth = getAuth(app);\nconst db = getFirestore(app);\n\n// ✅ Register New User and Assign Role (Email/Password)\nconst registerWithEmail = async (email, password, role) => {\n    try {\n        const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n        const user = userCredential.user;\n\n        // ✅ Save user details in Firestore with assigned role\n        await setDoc(doc(db, \"users\", user.uid), {\n            email: user.email,\n            role: role,  // Either 'fsra' or 'carrier'\n            uid: user.uid\n        });\n\n        console.log(\"✅ User registered successfully:\", user.email);\n        return user;\n    } catch (error) {\n        console.error(\"❌ Error registering user:\", error.message);\n        return null;\n    }\n};\n\n// ✅ Login Existing User and Fetch Role\nconst loginWithEmail = async (email, password) => {\n    try {\n        const userCredential = await signInWithEmailAndPassword(auth, email, password);\n        const user = userCredential.user;\n\n        // ✅ Fetch User Role from Firestore\n        const userRef = doc(db, \"users\", user.uid);\n        const userSnap = await getDoc(userRef);\n\n        if (userSnap.exists()) {\n            const role = userSnap.data().role;\n            console.log(\"✅ User logged in:\", user.email, \"Role:\", role);\n            return { user, role };\n        } else {\n            console.warn(\"⚠️ No role found, defaulting to Carrier\");\n            return { user, role: \"carrier\" }; // Default role\n        }\n    } catch (error) {\n        console.error(\"❌ Error logging in:\", error.message);\n        return null;\n    }\n};\n\n// ✅ Logout User\nconst logout = async () => {\n    try {\n        await signOut(auth);\n        console.log(\"✅ User logged out\");\n    } catch (error) {\n        console.error(\"❌ Error logging out:\", error.message);\n    }\n};\n\n// ✅ Listen for Auth State Changes (Auto Login Check)\nconst authStateListener = (setUser, setRole) => {\n    return onAuthStateChanged(auth, async (currentUser) => {\n        if (currentUser) {\n            setUser(currentUser);\n            const userRef = doc(db, \"users\", currentUser.uid);\n            const userSnap = await getDoc(userRef);\n            if (userSnap.exists()) {\n                setRole(userSnap.data().role);\n            } else {\n                setRole(\"carrier\"); // Default role\n            }\n        } else {\n            setUser(null);\n            setRole(null);\n        }\n    });\n};\n\n// ✅ Export Everything\nexport { auth, db, registerWithEmail, loginWithEmail, logout, authStateListener };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}