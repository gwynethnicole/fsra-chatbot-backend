{"ast":null,"code":"import { initializeApp } from \"firebase/app\";\nimport { getAuth, createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut } from \"firebase/auth\";\nimport { getFirestore, doc, setDoc, getDoc } from \"firebase/firestore\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyC9XQrU79CXuj_s-5SWpP0s8knM2qyc2x8\",\n  authDomain: \"sample-d7290.firebaseapp.com\",\n  projectId: \"YOUR_PROJECT_ID\",\n  storageBucket: \"YOUR_PROJECT.appspot.com\",\n  messagingSenderId: \"YOUR_MESSAGING_SENDER_ID\",\n  appId: \"YOUR_APP_ID\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nconst auth = getAuth(app);\nconst db = getFirestore(app);\n\n// Register New User and Assign Role (Manual Sign Up)\nconst registerWithEmail = async (email, password, role) => {\n  try {\n    const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n    const user = userCredential.user;\n\n    // Save user details in Firestore with assigned role\n    await setDoc(doc(db, \"users\", user.uid), {\n      email: user.email,\n      role: role,\n      // Either 'fsra' or 'carrier'\n      uid: user.uid\n    });\n    console.log(\"User registered successfully\");\n  } catch (error) {\n    console.error(\"Error registering user:\", error.message);\n  }\n};\n\n// Login Existing User\nconst loginWithEmail = async (email, password) => {\n  try {\n    const userCredential = await signInWithEmailAndPassword(auth, email, password);\n    return userCredential.user;\n  } catch (error) {\n    console.error(\"Error logging in:\", error.message);\n  }\n};\n\n// Logout User\nconst logout = async () => {\n  try {\n    await signOut(auth);\n    console.log(\"User logged out\");\n  } catch (error) {\n    console.error(\"Error logging out:\", error.message);\n  }\n};\nexport { auth, db, registerWithEmail, loginWithEmail, logout };","map":{"version":3,"names":["initializeApp","getAuth","createUserWithEmailAndPassword","signInWithEmailAndPassword","signOut","getFirestore","doc","setDoc","getDoc","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","app","auth","db","registerWithEmail","email","password","role","userCredential","user","uid","console","log","error","message","loginWithEmail","logout"],"sources":["/Users/gwynethnicole/Desktop/frsa-web-app/src/firebaseConfig.js"],"sourcesContent":["import { initializeApp } from \"firebase/app\";\nimport { getAuth, createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut } from \"firebase/auth\";\nimport { getFirestore, doc, setDoc, getDoc } from \"firebase/firestore\";\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyC9XQrU79CXuj_s-5SWpP0s8knM2qyc2x8\",\n    authDomain: \"sample-d7290.firebaseapp.com\",\n    projectId: \"YOUR_PROJECT_ID\",\n    storageBucket: \"YOUR_PROJECT.appspot.com\",\n    messagingSenderId: \"YOUR_MESSAGING_SENDER_ID\",\n    appId: \"YOUR_APP_ID\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nconst auth = getAuth(app);\nconst db = getFirestore(app);\n\n// Register New User and Assign Role (Manual Sign Up)\nconst registerWithEmail = async (email, password, role) => {\n    try {\n        const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n        const user = userCredential.user;\n\n        // Save user details in Firestore with assigned role\n        await setDoc(doc(db, \"users\", user.uid), {\n            email: user.email,\n            role: role,  // Either 'fsra' or 'carrier'\n            uid: user.uid\n        });\n\n        console.log(\"User registered successfully\");\n    } catch (error) {\n        console.error(\"Error registering user:\", error.message);\n    }\n};\n\n// Login Existing User\nconst loginWithEmail = async (email, password) => {\n    try {\n        const userCredential = await signInWithEmailAndPassword(auth, email, password);\n        return userCredential.user;\n    } catch (error) {\n        console.error(\"Error logging in:\", error.message);\n    }\n};\n\n// Logout User\nconst logout = async () => {\n    try {\n        await signOut(auth);\n        console.log(\"User logged out\");\n    } catch (error) {\n        console.error(\"Error logging out:\", error.message);\n    }\n};\n\nexport { auth, db, registerWithEmail, loginWithEmail, logout };\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,cAAc;AAC5C,SAASC,OAAO,EAAEC,8BAA8B,EAAEC,0BAA0B,EAAEC,OAAO,QAAQ,eAAe;AAC5G,SAASC,YAAY,EAAEC,GAAG,EAAEC,MAAM,EAAEC,MAAM,QAAQ,oBAAoB;AAEtE,MAAMC,cAAc,GAAG;EACnBC,MAAM,EAAE,yCAAyC;EACjDC,UAAU,EAAE,8BAA8B;EAC1CC,SAAS,EAAE,iBAAiB;EAC5BC,aAAa,EAAE,0BAA0B;EACzCC,iBAAiB,EAAE,0BAA0B;EAC7CC,KAAK,EAAE;AACX,CAAC;;AAED;AACA,MAAMC,GAAG,GAAGhB,aAAa,CAACS,cAAc,CAAC;AACzC,MAAMQ,IAAI,GAAGhB,OAAO,CAACe,GAAG,CAAC;AACzB,MAAME,EAAE,GAAGb,YAAY,CAACW,GAAG,CAAC;;AAE5B;AACA,MAAMG,iBAAiB,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,EAAEC,IAAI,KAAK;EACvD,IAAI;IACA,MAAMC,cAAc,GAAG,MAAMrB,8BAA8B,CAACe,IAAI,EAAEG,KAAK,EAAEC,QAAQ,CAAC;IAClF,MAAMG,IAAI,GAAGD,cAAc,CAACC,IAAI;;IAEhC;IACA,MAAMjB,MAAM,CAACD,GAAG,CAACY,EAAE,EAAE,OAAO,EAAEM,IAAI,CAACC,GAAG,CAAC,EAAE;MACrCL,KAAK,EAAEI,IAAI,CAACJ,KAAK;MACjBE,IAAI,EAAEA,IAAI;MAAG;MACbG,GAAG,EAAED,IAAI,CAACC;IACd,CAAC,CAAC;IAEFC,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;EAC/C,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZF,OAAO,CAACE,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAACC,OAAO,CAAC;EAC3D;AACJ,CAAC;;AAED;AACA,MAAMC,cAAc,GAAG,MAAAA,CAAOV,KAAK,EAAEC,QAAQ,KAAK;EAC9C,IAAI;IACA,MAAME,cAAc,GAAG,MAAMpB,0BAA0B,CAACc,IAAI,EAAEG,KAAK,EAAEC,QAAQ,CAAC;IAC9E,OAAOE,cAAc,CAACC,IAAI;EAC9B,CAAC,CAAC,OAAOI,KAAK,EAAE;IACZF,OAAO,CAACE,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAACC,OAAO,CAAC;EACrD;AACJ,CAAC;;AAED;AACA,MAAME,MAAM,GAAG,MAAAA,CAAA,KAAY;EACvB,IAAI;IACA,MAAM3B,OAAO,CAACa,IAAI,CAAC;IACnBS,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;EAClC,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZF,OAAO,CAACE,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAACC,OAAO,CAAC;EACtD;AACJ,CAAC;AAED,SAASZ,IAAI,EAAEC,EAAE,EAAEC,iBAAiB,EAAEW,cAAc,EAAEC,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}