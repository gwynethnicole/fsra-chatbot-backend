{"ast":null,"code":"import { initializeApp } from \"firebase/app\";\nimport { getAuth, GoogleAuthProvider, signInWithPopup, signOut } from \"firebase/auth\";\nimport { getFirestore, doc, setDoc, getDoc, collection, addDoc } from \"firebase/firestore\";\n\n// Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyC9XQrU79CXuj_s-5SWpP0s8knM2qyc2x8\",\n  authDomain: \"sample-d7290.firebaseapp.com\",\n  projectId: \"sample-d7290\",\n  storageBucket: \"sample-d7290.appspot.com\",\n  messagingSenderId: \"755788443725\",\n  appId: \"1:755788443725:web:cdfc6af42193a4da9d6c04\",\n  measurementId: \"G-MCEZX0450J\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nexport const auth = getAuth(app);\nexport const db = getFirestore(app);\nexport const googleProvider = new GoogleAuthProvider();\n\n// Function to sign in with Google and assign user role\nexport const signInWithGoogle = async role => {\n  try {\n    const result = await signInWithPopup(auth, googleProvider);\n    const user = result.user;\n    console.log(\"✅ User Signed In:\", user);\n\n    // Check if user already exists in Firestore\n    const userRef = doc(db, \"users\", user.uid);\n    const userSnap = await getDoc(userRef);\n    if (!userSnap.exists()) {\n      // If user does not exist, set role in Firestore\n      await setDoc(userRef, {\n        uid: user.uid,\n        name: user.displayName,\n        email: user.email,\n        role: role // Role is either \"carrier\" or \"fsra\"\n      });\n      console.log(`✅ New ${role} user added to Firestore`);\n    } else {\n      console.log(\"✅ User already exists in Firestore\");\n    }\n  } catch (error) {\n    console.error(\"❌ Error Signing In:\", error);\n  }\n};\n\n// Function to submit a policy change request (For Carriers)\nexport const submitPolicyRequest = async (user, requestDetails) => {\n  try {\n    if (user && user.role === \"carrier\") {\n      await addDoc(collection(db, \"policyRequests\"), {\n        userId: user.uid,\n        name: user.displayName,\n        email: user.email,\n        requestDetails,\n        status: \"pending\",\n        // Default status\n        timestamp: new Date()\n      });\n      console.log(\"✅ Policy request submitted!\");\n    } else {\n      console.error(\"❌ Only carriers can submit requests.\");\n    }\n  } catch (error) {\n    console.error(\"❌ Error submitting policy request:\", error);\n  }\n};\n\n// Function to logout\nexport const logout = async () => {\n  try {\n    await signOut(auth);\n    console.log(\"✅ User Signed Out\");\n  } catch (error) {\n    console.error(\"❌ Error Signing Out:\", error);\n  }\n};","map":{"version":3,"names":["initializeApp","getAuth","GoogleAuthProvider","signInWithPopup","signOut","getFirestore","doc","setDoc","getDoc","collection","addDoc","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","app","auth","db","googleProvider","signInWithGoogle","role","result","user","console","log","userRef","uid","userSnap","exists","name","displayName","email","error","submitPolicyRequest","requestDetails","userId","status","timestamp","Date","logout"],"sources":["/Users/gwynethnicole/Desktop/frsa-web-app/src/firebaseConfig.js"],"sourcesContent":["import { initializeApp } from \"firebase/app\";\nimport { getAuth, GoogleAuthProvider, signInWithPopup, signOut } from \"firebase/auth\";\nimport { getFirestore, doc, setDoc, getDoc, collection, addDoc } from \"firebase/firestore\";\n\n// Firebase configuration\nconst firebaseConfig = {\n    apiKey: \"AIzaSyC9XQrU79CXuj_s-5SWpP0s8knM2qyc2x8\",\n    authDomain: \"sample-d7290.firebaseapp.com\",\n    projectId: \"sample-d7290\",\n    storageBucket: \"sample-d7290.appspot.com\",\n    messagingSenderId: \"755788443725\",\n    appId: \"1:755788443725:web:cdfc6af42193a4da9d6c04\",\n    measurementId: \"G-MCEZX0450J\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nexport const auth = getAuth(app);\nexport const db = getFirestore(app);\nexport const googleProvider = new GoogleAuthProvider();\n\n// Function to sign in with Google and assign user role\nexport const signInWithGoogle = async (role) => {\n    try {\n        const result = await signInWithPopup(auth, googleProvider);\n        const user = result.user;\n        console.log(\"✅ User Signed In:\", user);\n\n        // Check if user already exists in Firestore\n        const userRef = doc(db, \"users\", user.uid);\n        const userSnap = await getDoc(userRef);\n\n        if (!userSnap.exists()) {\n            // If user does not exist, set role in Firestore\n            await setDoc(userRef, {\n                uid: user.uid,\n                name: user.displayName,\n                email: user.email,\n                role: role, // Role is either \"carrier\" or \"fsra\"\n            });\n            console.log(`✅ New ${role} user added to Firestore`);\n        } else {\n            console.log(\"✅ User already exists in Firestore\");\n        }\n    } catch (error) {\n        console.error(\"❌ Error Signing In:\", error);\n    }\n};\n\n// Function to submit a policy change request (For Carriers)\nexport const submitPolicyRequest = async (user, requestDetails) => {\n    try {\n        if (user && user.role === \"carrier\") {\n            await addDoc(collection(db, \"policyRequests\"), {\n                userId: user.uid,\n                name: user.displayName,\n                email: user.email,\n                requestDetails,\n                status: \"pending\", // Default status\n                timestamp: new Date(),\n            });\n            console.log(\"✅ Policy request submitted!\");\n        } else {\n            console.error(\"❌ Only carriers can submit requests.\");\n        }\n    } catch (error) {\n        console.error(\"❌ Error submitting policy request:\", error);\n    }\n};\n\n// Function to logout\nexport const logout = async () => {\n    try {\n        await signOut(auth);\n        console.log(\"✅ User Signed Out\");\n    } catch (error) {\n        console.error(\"❌ Error Signing Out:\", error);\n    }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}